浏览器 从上到下解析代码

解析到link标签 css加载不会阻塞DOM树的解析 但是会阻塞DOM树的渲染 (多次渲染 不如 最后渲染一次)
				cssdom还没构建完成时，页面是不会渲染到浏览器界面
				css加载完之后再根据最终的样式来渲染DOM树，避免了css加载完之后DOM树又得重新重绘或者回流等一系列没有必要的损耗
				
解析到同步的script标签  会阻塞dom树的构建(因为js可以操作dom节点 浏览器防止渲染好的dom被js删除,干脆停止dom树的构建)
                       并且还会渲染样式 (因为 浏览器 需要给js提供最新的dom元素信息)
					   
					   
　由于大部分现代浏览器会预加载资源，所以在使用时只要遵循以下原则就可以了：

CSS放在页面头部，保证它先加载完成不会阻塞JS的运行；
JS放在页面底部，保证了兼容性的同时没有让脚本的加载阻塞到HTML的解析，减少了白屏时间。
--------------------------------------------------------------------------------------------------------------
最后 DOM树和css树 合并 成渲染树
DOM树和渲染树  不是一一对应
display:none  和 header 标签就不会出现渲染树上

重构和重排(回流)
重构   color，background-color
重排 : scrollTop  大小位置

解决重排   1 由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排
			让该元素脱离渲染树
			对其进行多重改变
			将元素带回渲染树
			
			这种方法造成俩次重排，分别是控制元素的显示与隐藏。对于复杂的，数量巨大的节点段落可以考虑这种方法



		  2  切换calss 将多次重排合并成一次  