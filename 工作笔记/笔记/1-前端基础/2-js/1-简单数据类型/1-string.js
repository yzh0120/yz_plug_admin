string的所有方法都不会改变源字符串 
定义一个正则 var re = /ab/g

<1> 'abcde'.slice(0,2)       (开始的索引,结束的索引) 两个参数可以为负数,但是必须第二个参数在字符串中的位置大于第一个参数,才能截取
	以字符串的形式返回: 根据参数选择的字符串,
	衍生:
	(1)'abcde'.substring(1,2)    (开始的索引,结束的索引) 参数不能为负数
	(2)'abcde'.substr(1,2)       (开始的索引,选择的个数)
	
	
<2> 'abcde'.split('b')
	以字符串的形式返回: 根据字符串中存在的字符将字符串为数组,数组不包括参数的字符串,
	
	
<3> 'abcde'.replace(re,1)    (正则/字符串, 替换字符串)
	以字符串的形式返回: 第2个参数 替换 第一个参数 形成的新字符串,
	衍生:
	(1)'abcdeab'.match(re)      (正则/字符串)    
	以数组的形式返回: 根据第一个参数,匹配成功的,多个字符,
		
	
<4> 'abcde'.includes('z')    (不能是正则)
	以布尔值的形式返回: 字符串中是否存在第一个参数,
	衍生:
	(1)'abcde'.startsWith('z')    
	以布尔值的形式返回: 字符串绝对头部中是否存在第一个参数,
	(2)'abcde'.endsWith('z')      
	以布尔值的形式返回: 字符串绝对尾部中是否存在第一个参数,
	
	
<5> 'abcde'.repeat(2)
	以字符串的形式返回: 将原字符重复 第一个参数后 的新字符串,
	衍生:
	(1)'abcde'.padStart(10,'cd')  
	以字符串的形式返回: 将源字符串开头将第二个参数重复,直到字符串长度满足第一个参数,
	(2)'abcde'.padEnd(10,'cd')    
	以字符串的形式返回: 将源字符串结尾将第二个参数重复,直到字符串长度满足第一个参数,
	
	
<6> '   abc de    '.trim()
	以字符串的形式返回: 去除字符串两边的空格后的字符串,
	衍生:
	(1)'   abc de    '.trimStart()     
	以字符串的形式返回: 去除字符串头部的空格后的字符串,
	(2)'   abc de    '.trimEnd()       
	以字符串的形式返回: 去除字符串尾部的空格后的字符串,
	
	
<7> 'abcde'.charAt(1)
	以字符的形式返回: 根据索引查找的字符串中对应的字符,
	衍生:
	(1)'abcdea'.indexOf('a')
	以数字的形式返回: 根据字符查找的字符串从头部开始对应的索引,
	(2)'abcdea'.lastIndexOf('a')
	以数字的形式返回: 根据字符查找的字符串从尾部开始对应的索引,
	
	

	