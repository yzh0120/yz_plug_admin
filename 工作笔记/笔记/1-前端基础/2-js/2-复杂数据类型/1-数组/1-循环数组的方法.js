1:所有循环数组的方法的 item 都是 原数组的当前成员的拷贝,所以有两种情况
 (1) 当前成员是简单数据类型,只能通过arr[index]改变
 (2) 当前成员是复杂数据类型,因为拷贝的是引用地址,所以可以通过 方法的item改变原数组的item

2:箭头函数中的this在函数定义的时候就确定了,所以对于所有循环数组的方法如果有箭头函数,就不会指向循环方法的第二个参数的对象了


<1> [0,1,2,3,4,5].forEach((item,index,arr)=>{
			return this.a
		},{a:1})
	不会有返回值的循环数组,
	衍生:
	(1)[0,1,2,3,4,5].map((item,index,arr)=>{
			return this.a
		},{a:1})
	有返回值的循环数组,如果没有return,则返回数组的成员都是undefined
	

<2> [0,1,2,3,4,5].every((item,index,arr)=>{
			return item > 5
		},{a:1})
	遍历的所有成员,必须都满足条件,才能返回true
	衍生:
	(1)[0,1,2,3,4,5].some((item,index,arr)=>{
			return item > 5
		},{a:1})
	遍历的所有成员,最少一个成员满足条件,才能返回true
	
	
<3> [0,1,2,3,4,5].find((item,index,arr)=>{//内部使用Object.is()判断元素而不是 === ,所以NaN 和NaN 相等,+0 和 -0 不相等
			return item > 50
		},{a:1})
	遍历的所有成员,返回第一个满足条件的元素,否则返回undefined
	衍生:
	(1)[0,1,2,3,4,5].findIndex((item,index,arr)=>{
			return item > 50
		},{a:1})
	遍历的所有成员,返回第一个满足条件的元素的index,否则返回 -1
	
	
<4> [0,1,2,3,4,5].filter((item,index,arr)=>{
			return item > 5
		},{a:1})
	以数组的形式返回: 符合条件的成员,
	
	
<5> [0,1,2,3,4,5].includes(12)
	以布尔值的形式返回: 数组是否包含参数,
	
	
<6> [0,1,2,3,4,5].indexOf('123')
	遍历的所有成员,返回参数在数组中第一次出现的index,否则返回 -1
	衍生:
	[0,1,2,3,4,5].lastIndexOf('123')
	遍历的所有成员,返回参数在数组中最后一次出现的index,否则返回 -1
	